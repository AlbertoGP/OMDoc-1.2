<?xml version="1.0" encoding="utf-8"?>
<!-- An XSL style sheet for creating human-oriented output from 
     OMDoc (Open Mathematical Documents). It forms the basis for 
     the style sheets transforming OMDoc into html, mathml, TeX, 
     and Mathematica notebooks.
     $Id: mobj.xsl 8024 2008-09-09 16:51:59Z kohlhase $
     $HeadURL: https://svn.omdoc.org/repos/omdoc/branches/omdoc-1.2/xsl/share/mobj.xsl $
     send bug-reports, patches, suggestions to developers@omdoc.org

     Copyright (c) 2000 - 2002 Michael Kohlhase, 

     This library is free software; you can redistribute it and/or
     modify it under the terms of the GNU Lesser General Public
     License as published by the Free Software Foundation; either
     version 2.1 of the License, or (at your option) any later version.

     This library is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->


<xsl:stylesheet version="1.0"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:om="http://www.openmath.org/OpenMath"
  xmlns:omdoc="http://www.mathweb.org/omdoc"
  xmlns:m="http://www.w3.org/1998/Math/MathML"
  exclude-result-prefixes="om omdoc m">  

<xsl:strip-space elements="*"/>

<xsl:template match="omdoc:legacy">
  <xsl:apply-templates mode="verbatimcopy"/>
</xsl:template>

<!-- **** this takes care of the deprecated form of DAG encoding in OMDoc -->
<!-- If there is an xref attribute, we just apply the templates to the object referenced -->
<xsl:template match="om:OMATTR[@xref]|om:OMB[@xref]|om:OMF[@xref]|om:OMA[@xref]|
                     om:OMBIND[@xref]|om:OMI[@xref]|om:OMSTR[@xref]|om:OMOBJ[@xref]">
  <xsl:param name="prefix"/>
  <xsl:variable name="ref" select="@xref"/>
  <xsl:apply-templates select="id($ref)">
    <xsl:with-param name="prefix" select="concat($prefix,generate-id())"/>
  </xsl:apply-templates>
</xsl:template>

<!-- For OMR, we just apply the templates to the target object -->
<xsl:template match="om:OMR">
  <xsl:param name="prefix"/>
  <xsl:variable name="ref" select="substring-after(@href, '#')"/>
  <xsl:apply-templates select="id($ref)">
    <xsl:with-param name="prefix" select="concat($prefix,generate-id())"/>
  </xsl:apply-templates>
</xsl:template>

<!-- for all those that do not have xref, we have to define fallback templates.
     Unfortunately, we have to define two (xslt sucks for modes) for OMA, OMBIND, OMATTR
     - one without mode so that if there is no presentation at all for a symbol, 
       then this one can be applied
     - one with mode 'fallback', which can be called from the template generated by 
       expres.xsl. There we cannot just call the one without mode, since that would 
       result in an empty loop. -->
<xsl:template match="om:OMI[not(@xref)]|om:OMSTR[not(@xref)]|m:cn|m:mtext">
  <xsl:param name="prefix"/>
  <xsl:apply-templates/>
</xsl:template>

 <xsl:template match="om:OMOBJ[not(@xref)]" mode="fallback">
  <xsl:param name="prefix"/>
  <xsl:variable name="display">
    <xsl:choose>
      <xsl:when test="@class='displaymath'"><xsl:text>block</xsl:text></xsl:when>
      <xsl:when test="contains(@style,'display:block')"><xsl:text>block</xsl:text></xsl:when>
      <xsl:otherwise><xsl:text>inline</xsl:text></xsl:otherwise>
    </xsl:choose>
  </xsl:variable>
  <xsl:call-template name="with-style">
    <xsl:with-param name="class" select="omdoc:unless-class('displaymath')"/>
    <xsl:with-param name="style" select="@style"/>
    <xsl:with-param name="id" select="concat($prefix,'MCR',generate-id())"/>
    <xsl:with-param name="display" select="$display"/>
    <xsl:with-param name="content">
      <xsl:apply-templates>
        <xsl:with-param name="prefix" select="$prefix"/>
      </xsl:apply-templates>
    </xsl:with-param>
  </xsl:call-template>
</xsl:template>

 <xsl:template match="om:OMOBJ[not(@xref)]">
   <xsl:param name="prefix"/>
   <xsl:apply-templates select="." mode="fallback">
     <xsl:with-param name="prefix" select="$prefix"/>
   </xsl:apply-templates>
 </xsl:template>

<xsl:template match="om:OMA[not(@xref)]|m:apply">
  <xsl:param name="prefix"/>
  <xsl:apply-templates select="." mode="fallback">
    <xsl:with-param name="prefix" select="$prefix"/>
  </xsl:apply-templates>
</xsl:template>

<xsl:template match="om:OMA|m:apply" mode="fallback">
  <xsl:param name="prefix"/>
  <xsl:apply-templates select="*[1]">
    <xsl:with-param name="prefix" select="$prefix"/>
  </xsl:apply-templates>
  <xsl:text>(</xsl:text>
  <xsl:for-each select="*[position()!=1]">
    <xsl:apply-templates select=".">
      <xsl:with-param name="prefix" select="$prefix"/>
    </xsl:apply-templates>
    <xsl:if test="position()!=last()"><xsl:text>,</xsl:text></xsl:if>
  </xsl:for-each>
  <xsl:text>)</xsl:text>
</xsl:template>

<xsl:template match="om:OMBIND[not(@xref)]">
  <xsl:param name="prefix"/>
  <xsl:apply-templates select="." mode="fallback">
    <xsl:with-param name="prefix" select="$prefix"/>
  </xsl:apply-templates>
</xsl:template>

<xsl:template match="om:OMBIND" mode="fallback">
  <xsl:param name="prefix"/>
  <xsl:text>(</xsl:text>
  <xsl:apply-templates>
    <xsl:with-param name="prefix" select="$prefix"/>
  </xsl:apply-templates>
  <xsl:text>)</xsl:text>
</xsl:template>

<xsl:template match="om:OMF[not(@xref)]">
  <xsl:choose>
    <xsl:when test="@dec">
      <xsl:value-of select="format-number(@dec,'#')"/>
    </xsl:when>
    <xsl:when test="@hex">
      <xsl:value-of select="format-number(@hex,'#')"/>
    </xsl:when>
    <xsl:otherwise>
      <xsl:call-template name="warning">
        <xsl:with-param name="string"
          select="'Must have xref, dec, or hex attribute to present an OMF'"/>
      </xsl:call-template>
    </xsl:otherwise>
  </xsl:choose>
</xsl:template>

<xsl:template match="om:OMATTR[not(@xref)]">
  <xsl:param name="prefix"/>
 <!-- we process the attributes that act before -->
 <xsl:variable name="pre-post-treated">
   <xsl:apply-templates select="om:OMATP/om:OMS[position() mod 2 =1]" mode="prefix">
     <xsl:with-param name="prefix" select="$prefix"/>
   </xsl:apply-templates>
   <!-- we process the body -->
   <xsl:apply-templates select="*[2]">
     <xsl:with-param name="prefix" select="$prefix"/>
   </xsl:apply-templates>
   <!-- we process the attributes that act after -->
   <xsl:apply-templates select="om:OMATP/om:OMS[(position() mod 2) = 1]" mode="postfix">
     <xsl:with-param name="prefix" select="$prefix"/>
   </xsl:apply-templates>
 </xsl:variable>
 <!-- we only apply the first feature with bracket style 'lisp', all others are disregarded -->
 <xsl:apply-templates select="om:OMATP/om:OMS[(position() mod 2) = 1][1]" mode="around">
   <xsl:with-param name="content" select="$pre-post-treated"/>
   <xsl:with-param name="prefix" select="$prefix"/>
 </xsl:apply-templates>
</xsl:template>

<!-- the fallback behavior for attributes is to do nothing -->
<xsl:template match="om:OMS" mode="prefix-fallback"/>
<xsl:template match="om:OMS" mode="postfix-fallback"/>
<xsl:template match="om:OMS" mode="around-fallback">
  <xsl:param name="content"/>
  <xsl:copy-of select="$content"/>
</xsl:template>

<xsl:template match="om:OMS" mode="prefix"/>
<xsl:template match="om:OMS" mode="postfix"/>
<xsl:template match="om:OMS" mode="around">
  <xsl:param name="content"/>
  <xsl:copy-of select="$content"/>
</xsl:template>

<xsl:template match="om:OMB[not(@xref)]">
  <xsl:call-template name="warning">
    <xsl:with-param name="string" select="'Not formatting OM Byte Array element!'"/>
  </xsl:call-template>
</xsl:template>

<!-- now come the elements that do not have an 'xref' attribute 
     per definitionem -->
<xsl:template name="do-OMS">
  <xsl:param name="prefix"/>
  <xsl:variable name="uri">
    <xsl:text>#</xsl:text><xsl:value-of select="@name"/>
  </xsl:variable>
  <xsl:call-template name="print-symbol">
    <xsl:with-param name="id" select="concat($prefix,generate-id())"/>
    <xsl:with-param name="prefix" select="$prefix"/>
    <xsl:with-param name="print-form"><xsl:value-of select="@name"/></xsl:with-param>
    <xsl:with-param name="uri"><xsl:value-of select="$uri"/></xsl:with-param>
  </xsl:call-template>
</xsl:template>

<xsl:template name="do-csymbol">
  <xsl:param name="prefix"/>
  <xsl:call-template name="print-symbol">
    <xsl:with-param name="id" select="concat($prefix,generate-id())"/>
    <xsl:with-param name="prefix" select="$prefix"/>
    <xsl:with-param name="print-form" select="."/>
    <xsl:with-param name="uri"><xsl:value-of select="@definitionURL"/></xsl:with-param>
  </xsl:call-template>
</xsl:template>

<xsl:template match="m:csymbol">
  <xsl:param name="prefix"/>
  <xsl:call-template name="do-csymbol">
    <xsl:with-param name="prefix" select="$prefix"/>
  </xsl:call-template>
</xsl:template>

<xsl:template match="m:csymbol" mode="fallback">
  <xsl:param name="prefix"/>
  <xsl:call-template name="do-csymbol">
    <xsl:with-param name="prefix" select="$prefix"/>
  </xsl:call-template>
</xsl:template>

<xsl:template match="om:OMS">
  <xsl:param name="prefix"/>
  <xsl:call-template name="do-OMS">
    <xsl:with-param name="prefix" select="$prefix"/>
  </xsl:call-template>
</xsl:template>

<xsl:template match="om:OMS" mode="fallback">
  <xsl:param name="prefix"/>
  <xsl:call-template name="do-OMS">
    <xsl:with-param name="prefix" select="$prefix"/>
  </xsl:call-template>
</xsl:template>

<xsl:template match="om:OMV|m:ci">
  <xsl:param name="prefix"/>
  <xsl:call-template name="do-print-variable">
    <xsl:with-param name="prefix" select="$prefix"/>
  </xsl:call-template>
</xsl:template>

<xsl:template match="om:OMBVAR|m:bvar">
  <xsl:param name="prefix"/>
  <xsl:for-each select="*">
    <xsl:apply-templates select=".">
      <xsl:with-param name="prefix" select="$prefix"/>
    </xsl:apply-templates>
    <xsl:if test="position()!=last()"><xsl:text>,</xsl:text></xsl:if>
  </xsl:for-each>
  <xsl:text>.</xsl:text>
</xsl:template>

<xsl:template match="om:OME">
  <xsl:text>OM Error(</xsl:text><xsl:apply-templates select="*[1]"/><xsl:text>)</xsl:text>
  <xsl:call-template name="warning">
    <xsl:with-param name="string" select="'Not formatting OM Error element'"/>
  </xsl:call-template>
</xsl:template>

</xsl:stylesheet>


