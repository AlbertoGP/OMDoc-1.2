<?xml version="1.0" encoding="utf-8"?>
<!-- An XSL style sheet for creating TPTP representations from OMDoc
     Initial version 20000824 by Michael Kohlhase, 
     send bug-reports, patches, suggestions to developers@omdoc.org

     Copyright (c) 2000 - 2003 Michael Kohlhase, 

     This library is free software; you can redistribute it and/or
     modify it under the terms of the GNU Lesser General Public
     License as published by the Free Software Foundation; either
     version 2.1 of the License, or (at your option) any later version.

     This library is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this library; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-->

<xsl:stylesheet 
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns:om="http://www.openmath.org/OpenMath"
  xmlns:omdoc="http://www.mathweb.org/omdoc"
  version="1.0">

  <xsl:strip-space elements="*"/>

  <xsl:output method="text"/>

  <xsl:template match="*">
    <xsl:message>
      cannot deal with case <xsl:value-of select="local-name()"/> yet!
    </xsl:message>
  </xsl:template>

  <xsl:template match="/">
    <xsl:text>% This file is automatically generated from OMDoc, do not edit&#xA;&#xA;</xsl:text>
    <xsl:apply-templates/>
  </xsl:template>

  <xsl:template match="omdoc:omdoc">
    <xsl:text>some header here&#xA;&#xA;</xsl:text>
    <xsl:apply-templates/>
  </xsl:template>

  <xsl:template match="omdoc:theory|omdoc:FMP|om:OMOBJ">
    <xsl:apply-templates/>
  </xsl:template>

  <!-- ******** type information here ********* -->
  <xsl:template match="omdoc:symbol"/>

  <xsl:template match="omdoc:assertion">
    <xsl:text>input_formula(</xsl:text>
    <xsl:value-of select="@xml:id"/>
    <xsl:text>,</xsl:text>
    <xsl:value-of select="@type"/>
    <xsl:text>,(</xsl:text>
    <xsl:apply-templates/>
    <xsl:text>)).&#xA;&#xA;</xsl:text>
  </xsl:template>

  <xsl:template match="omdoc:definition">
    <xsl:text>input_formula(</xsl:text>
    <xsl:value-of select="@xml:id"/>
    <xsl:text>, axiom,(</xsl:text>
    <xsl:variable name="ombind" 
      select="omdoc:FMP/om:OMOBJ/om:OMBIND[om:OMS[position()=1 and 
                                                  @cd='fns1' and 
                                                  @name='lambda']]"/>
    <xsl:choose>
      <xsl:when test="$ombind">
        <xsl:text>![</xsl:text>
        <xsl:for-each select="$ombind/*[2]/*">
          <xsl:apply-templates select="."/>
          <xsl:if test="position() != last()"><xsl:text>,</xsl:text></xsl:if>
        </xsl:for-each>
        <xsl:text>]: equal(</xsl:text>
        <xsl:value-of select="@for"/>
        <xsl:text>(</xsl:text>
        <xsl:for-each select="$ombind/*[2]/*">
          <xsl:apply-templates select="."/>
          <xsl:if test="position() != last()"><xsl:text>,</xsl:text></xsl:if>
        </xsl:for-each>
        <xsl:text>),</xsl:text>
        <xsl:apply-templates select="$ombind/*[3]"/>
        <xsl:text>)</xsl:text>
      </xsl:when>
      <xsl:otherwise><xsl:apply-templates/></xsl:otherwise>
    </xsl:choose>
    <xsl:text>)).&#xA;&#xA;</xsl:text>
  </xsl:template>

  <xsl:template match="om:OMBVAR">
    <xsl:text>[</xsl:text>
    <xsl:for-each select="*">
      <xsl:apply-templates select="."/>
      <xsl:if test="position()!=last()"><xsl:text>,</xsl:text></xsl:if>
    </xsl:for-each>
    <xsl:text>]:</xsl:text>
  </xsl:template>

  <xsl:template match="om:OMV|om:OMS">
    <xsl:value-of select="@name"/>
  </xsl:template>

  <xsl:template match="om:OMA">
    <xsl:apply-templates select="*[1]"/>
    <xsl:text>(</xsl:text>
    <xsl:for-each select="*[position() &gt; 1]">
      <xsl:apply-templates select="."/>
      <xsl:if test="position() != last()"><xsl:text>,</xsl:text></xsl:if>
    </xsl:for-each>
    <xsl:text>)</xsl:text>
  </xsl:template>

  <!-- tptp does not handle typed variables yet, so we throw away all attribuitions -->
  <xsl:template match="om:OMATTR">
    <xsl:apply-templates select="*[2]"/>
  </xsl:template>

  <xsl:template match="omdoc:metadata|omdoc:presentation|omdoc:example|omdoc:catalogue|omdoc:omtext"/>
  
</xsl:stylesheet>
