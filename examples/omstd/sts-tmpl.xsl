<?xml version="1.0"?>
<!--
    An XSL style sheet for presenting OpenMath Symbols used in the 
    OpenMath Document (OMDoc) sts-omdoc.omdoc.
  
    This XSL style file is automatically generated from an OMDoc document, do not edit!
  -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:exsl="http://exslt.org/common" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:om="http://www.openmath.org/OpenMath" xmlns:omdoc="http://www.mathweb.org/omdoc" version="1.0" exsl:dummy="to get the namespace right" xlink:dummy="to get the namespace right" om:dummy="to get the namespace right" omdoc:dummy="to get the namespace right" extension-element-prefixes="exsl">

<xsl:template match="om:OMS[@name='type' and @cd='sts' and not(@style)]" priority="1" mode="around"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:param name="content"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='sts']/@omdoc)"/><xsl:variable name="name" select="'type'"/><xsl:variable name="pos" select="position()"/><xsl:choose><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open"/><xsl:with-param name="close"/><xsl:with-param name="content"><xsl:element name="msub" namespace="{$TargetNS}"><xsl:attribute name="id"><xsl:value-of select="concat('MCR',$prefix,generate-id())"/></xsl:attribute><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:copy-of select="$content"/><xsl:apply-templates select="../*[position()=$pos+1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:with-param><xsl:with-param name="parent-element">msub</xsl:with-param></xsl:call-template></xsl:element></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:apply-templates select="." mode="around-fallback"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="content" select="$content"/></xsl:apply-templates></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="om:OMS[@name='type' and @cd='sts' and not(@style)]" priority="1" mode="prefix"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='sts']/@omdoc)"/><xsl:variable name="name" select="'type'"/><xsl:variable name="pos" select="position()"/><xsl:choose><xsl:when test="$format='html'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open"/><xsl:with-param name="close"/><xsl:with-param name="content"><xsl:element name="sub" namespace="{$TargetNS}"><xsl:attribute name="id"><xsl:value-of select="concat('MCR',$prefix,generate-id())"/></xsl:attribute><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:apply-templates select="../*[position()=$pos+1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:with-param><xsl:with-param name="parent-element">sub</xsl:with-param></xsl:call-template></xsl:element></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">_{</xsl:with-param><xsl:with-param name="close">}</xsl:with-param><xsl:with-param name="content"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:apply-templates select="../*[position()=$pos+1]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:with-param></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:apply-templates select="." mode="prefix-fallback"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:otherwise></xsl:choose></xsl:template>



<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='mapsto' and @cd='sts' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='sts']/@omdoc)"/><xsl:variable name="name" select="'mapsto'"/><xsl:choose><xsl:when test="$format='html'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open"/><xsl:with-param name="close"/><xsl:with-param name="content"><xsl:for-each select="*[position()!=last() and position() &gt; 1]"><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:if test="position()!=last()"><xsl:text>,</xsl:text></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template><xsl:text>↦</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[position()=last()]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:element name="mrow" namespace="{$TargetNS}"><xsl:attribute name="id"><xsl:value-of select="generate-id(.)"/></xsl:attribute><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="200"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><xsl:for-each select="*[position()!=last() and position() &gt; 1]"><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="."><xsl:with-param name="prec" select="200"/><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:if test="position()!=last()"><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>,</xsl:text></xsl:element></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>↦</xsl:text></xsl:element><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[position()=last()]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open"/><xsl:with-param name="close"/><xsl:with-param name="content"><xsl:for-each select="*[position()!=last() and position() &gt; 1]"><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:if test="position()!=last()"><xsl:text>{\times}</xsl:text></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template><xsl:element name="mo" namespace="{$TargetNS}"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>\rightarrow</xsl:text></xsl:element><xsl:text>{</xsl:text><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[position()=last()]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:text>}</xsl:text></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:apply-templates select="." mode="fallback"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='nary' and @cd='sts' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='sts']/@omdoc)"/><xsl:variable name="name" select="'nary'"/><xsl:choose><xsl:when test="$format='html'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="sup" namespace="http://www.w3.org/1999/xhtml"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>*</xsl:text></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'nary',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">^*</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'nary',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><xsl:element name="msup" namespace="{$TargetNS}"><xsl:attribute name="id"><xsl:value-of select="concat('MCR',$prefix,generate-id())"/></xsl:attribute><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'nary',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">*</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'nary',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template></xsl:with-param><xsl:with-param name="parent-element">msup</xsl:with-param></xsl:call-template></xsl:element></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:apply-templates select="." mode="fallback"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMA[not(@xref) and om:OMS[position()=1 and @name='nassoc' and @cd='sts' and not(@style)]]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='sts']/@omdoc)"/><xsl:variable name="name" select="'nassoc'"/><xsl:choose><xsl:when test="$format='html'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates><xsl:element name="sup" namespace="http://www.w3.org/1999/xhtml"><xsl:attribute name="xlink:href"><xsl:value-of select="omdoc:crossref($omdoc,$name,$crossref-format)"/></xsl:attribute><xsl:text>*</xsl:text></xsl:element></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='pmml'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><xsl:element name="msup" namespace="{$TargetNS}"><xsl:attribute name="id"><xsl:value-of select="concat('MCR',$prefix,generate-id())"/></xsl:attribute><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'nassoc',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">*</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'nassoc',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template></xsl:with-param><xsl:with-param name="parent-element">msup</xsl:with-param></xsl:call-template></xsl:element></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:when test="$format='TeX'"><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="make-group"><xsl:with-param name="content"><xsl:call-template name="with-arg-group"><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="$prec"/><xsl:with-param name="precedence" select="1000"/><xsl:with-param name="open">(</xsl:with-param><xsl:with-param name="close">)</xsl:with-param><xsl:with-param name="content"><xsl:for-each select="*[position()!=1]"><xsl:call-template name="do-arg"><xsl:with-param name="content"><xsl:apply-templates select="."><xsl:with-param name="prefix" select="$prefix"/><xsl:with-param name="prec" select="1000"/></xsl:apply-templates></xsl:with-param></xsl:call-template><xsl:if test="position()!=last()"><xsl:call-template name="print-separator"><xsl:with-param name="print-form" select="','"/><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'nassoc',$crossref-format)"/></xsl:call-template></xsl:if></xsl:for-each></xsl:with-param></xsl:call-template><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">^{*}</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'nassoc',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(*[1]))"/></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:when><xsl:otherwise><xsl:apply-templates select="." mode="fallback"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:otherwise></xsl:choose></xsl:template>

<xsl:template match="om:OMS[@name='structure' and @cd='sts' and not(@style)]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='sts']/@omdoc)"/><xsl:variable name="name" select="'structure'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><!--somehow I need this comment, otherwise xsltproc does not generate the rest--><xsl:apply-templates select="*[2]"><xsl:with-param name="prefix" select="$prefix"/></xsl:apply-templates></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

<xsl:template match="om:OMS[@name='NumericalValue' and @cd='sts' and not(@style)]" priority="1"><xsl:param name="prec" select="1000"/><xsl:param name="prefix"/><xsl:variable name="theory"><xsl:choose><xsl:when test="ancestor::omdoc:theory[1]/@xml:id"><xsl:value-of select="ancestor::omdoc:theory[1]/@xml:id"/></xsl:when><xsl:when test="ancestor::*[@theory]"><xsl:value-of select="substring-after(ancestor::*[@theory][1]/@theory, '#')"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="omdoc" select="string($href-cat/catalogue[@for=concat('#',$theory)]/loc[@theory='sts']/@omdoc)"/><xsl:variable name="name" select="'NumericalValue'"/><xsl:variable name="valid-lang" select="omdoc:comp-valid-language('en',$TargetLanguage)"/><xsl:choose><xsl:when test="$valid-lang='en'"><xsl:call-template name="print-symbol"><xsl:with-param name="print-form">Num</xsl:with-param><xsl:with-param name="crossref-symbol" select="'yes'"/><xsl:with-param name="uri" select="omdoc:crossref($omdoc,'NumericalValue',$crossref-format)"/><xsl:with-param name="id" select="concat('MCR',$prefix,generate-id(.))"/></xsl:call-template></xsl:when><xsl:otherwise/></xsl:choose></xsl:template>

</xsl:stylesheet>
