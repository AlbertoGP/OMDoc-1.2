<!--
   An XML DTD for Open Mathematical documents (OMDoc 1.2) 
   Module OMDOBJ (OpenMath Objects [variant])
      SYSTEM http://www.mathweb.org/omdoc/dtd/omdoj.dtd
      PUBLIC -//OMDoc//DTD OMDoc OMDOBJ V1.2//EN
   See the documentation and examples at http://www.omdoc.org 
   (c) 1999-2003 Michael Kohlhase, released under the GNU Public License (GPL)
-->

<!--  This DTD is a NON-STANDARD (experimental) variant of the 
      OpenMath Object DTD omobj.dtd (see http://www.openmath.org) 

      It is extended with coreferences! In particular, it adds the 
      attributes id and xref to OMOBJ OMA OMBIND and OMATTR
      Furthermore, it extends the DTD by namespace prefix magic.

      These extensions are licensed by the OpenMath Standard that 
      says that any extension, from which valid OpenMath can be 
      directly be generated is allowed.

      Note that this makes it less restrictive for OMA, OMS and 
      OMV than the original. Maybe this can be changed in a 
      future version by using XML schema. -->

<!-- set om.prefixed to INCLUDE to use OpenMath as a prefixed module -->
<!ENTITY % om.prefixed "%NS.prefixed;">
<!ENTITY % om.xmlns "http://www.openmath.org/OpenMath">
<!ENTITY % om.prefix "om">

<!-- if om.prefixed=INCLUDE, then use the prefix and delare the namespace -->
<![%om.prefixed;[
   <!ENTITY % om.pfx "%om.prefix;:">
   <!ENTITY % om.xmlns.extra.attrib "xmlns:%om.prefix; CDATA #FIXED '%om.xmlns;'">
   ]]>
<!ENTITY % om.pfx "">
<!ENTITY % om.xmlns.attrib "xmlns CDATA #FIXED '%om.xmlns;'">
<!ENTITY % om.xmlns.extra.attrib "">

<!ENTITY % om.OMS.qname "%om.pfx;OMS">
<!ENTITY % om.OMV.qname "%om.pfx;OMV">
<!ENTITY % om.OMI.qname "%om.pfx;OMI">
<!ENTITY % om.OMB.qname "%om.pfx;OMB">
<!ENTITY % om.OMSTR.qname "%om.pfx;OMSTR">
<!ENTITY % om.OMF.qname "%om.pfx;OMF">
<!ENTITY % om.OMA.qname "%om.pfx;OMA">
<!ENTITY % om.OMBIND.qname "%om.pfx;OMBIND">
<!ENTITY % om.OMBVAR.qname "%om.pfx;OMBVAR">
<!ENTITY % om.OME.qname "%om.pfx;OME">
<!ENTITY % om.OMR.qname "%om.pfx;OMR">
<!ENTITY % om.OMATTR.qname "%om.pfx;OMATTR">
<!ENTITY % om.OMATP.qname "%om.pfx;OMATP">
<!ENTITY % om.OMDATA.qname "%om.pfx;OMDATA">
<!ENTITY % om.OMOBJ.qname "%om.pfx;OMOBJ">

<!ENTITY % omel "%om.OMS.qname;
                | %om.OMV.qname;
                | %om.OMI.qname;
                | %om.OMB.qname;
                | %om.OMSTR.qname;
                | %om.OMF.qname;
                | %om.OMA.qname;
                | %om.OMBIND.qname;
                | %om.OMR.qname;
                | %om.OME.qname;
                | %om.OMATTR.qname;">

<!ENTITY % om.common.attlist "mid CDATA #IMPLIED
                              cref CDATA #IMPLIED
                              style CDATA #IMPLIED
                              class NMTOKEN #IMPLIED
                              id ID #IMPLIED 
                              xref IDREF #IMPLIED">  
<!-- attribute xref is an IDREF not an URIref, since we want to 
     allow structure sharing in one document, but not long-distance -->  

<!-- symbol, original OM, links make no sense -->
<!ELEMENT %om.OMS.qname; EMPTY>
<!ATTLIST %om.OMS.qname; %om.common.attlist;
          name CDATA #REQUIRED 
          cd CDATA #REQUIRED>

<!-- variable original OM, links make no sense -->
<!ELEMENT %om.OMV.qname; EMPTY>
<!ATTLIST %om.OMV.qname; %om.common.attlist;
          name CDATA #REQUIRED>

<!-- integer; links make sense, since integers can be big -->
<!ELEMENT %om.OMI.qname; (#PCDATA)>
<!ATTLIST %om.OMI.qname; %om.common.attlist;>
          
<!-- byte array; links make sense, since byte arrays can be big -->
<!ELEMENT %om.OMB.qname; (#PCDATA)>
<!ATTLIST %om.OMB.qname; %om.common.attlist;>

<!-- string; links make sense, since strings can be big -->
<!ELEMENT %om.OMSTR.qname; (#PCDATA)>
<!ATTLIST %om.OMSTR.qname; %om.common.attlist;>

<!-- floating point; links make sense, since Integers can be big -->
<!ELEMENT %om.OMF.qname; EMPTY>
<!ATTLIST %om.OMF.qname; %om.common.attlist;
          dec CDATA #IMPLIED
          hex CDATA #IMPLIED>

<!-- apply constructor; links make sense, no copied substructure -->
<!ELEMENT %om.OMA.qname; (%omel;)*>
<!ATTLIST %om.OMA.qname; %om.common.attlist;>

<!-- binding constructor & variable; links make sense, 
     no copied substructure -->
<!ELEMENT %om.OMBIND.qname; ((%omel;), %om.OMBVAR.qname;, (%omel;))?>
<!ATTLIST %om.OMBIND.qname; %om.common.attlist;>

<!-- bound variables, original OM, links make no sense -->
<!ELEMENT %om.OMBVAR.qname; (%om.OMV.qname;|%om.OMATTR.qname;)+>
<!ATTLIST %om.OMBVAR.qname; 
          %om.common.attlist;>

<!-- error; original OM, links make no sense -->
<!ELEMENT %om.OME.qname; (%om.OMS.qname;, (%omel;)* ) >

<!ELEMENT %om.OMR.qname; EMPTY>
<!ATTLIST %om.OMR.qname; %om.common.attlist;
	  xmlns:xlink CDATA #FIXED 'http://www.w3.org/1999/xlink'
          xlink:href CDATA #REQUIRED
          xlink:type CDATA #FIXED 'simple'
          xlink:show CDATA 'embed'>
	                
<!-- attribution constructor & attribute pair constructor -->
<!ELEMENT %om.OMATTR.qname; (%om.OMATP.qname;, (%omel;))? >
<!ATTLIST %om.OMATTR.qname; %om.common.attlist;>

<!ELEMENT %om.OMATP.qname; (%om.OMS.qname;, (%omel;|%om.OMDATA.qname;))+ >
<!ATTLIST %om.OMATP.qname; %om.common.attlist;>

<!-- in anticipation of the upcoming OM2 standard -->
<!ELEMENT %om.OMDATA.qname; ANY>
<!ATTLIST %om.OMDATA.qname; %om.common.attlist;
          encoding CDATA #REQUIRED>


<!-- OM object constructor; links make sense to avoid copying 
     substructure -->
<!ELEMENT %om.OMOBJ.qname; (%omel;)? >
<!ATTLIST %om.OMOBJ.qname;  
	  %om.common.attlist;
          %om.xmlns.attrib;>
